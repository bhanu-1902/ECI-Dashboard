{"version":3,"sources":["components/TCServices/tcservicesList.js","components/AWServices/awservicesList.js","components/DBServices/dbservicesList.js","App.js","reportWebVitals.js","index.js"],"names":["Service","props","service","SERVICE_NAME","STATE","Button","type","class","TCServiceList","updateData","a","fetch","response","json","data","setState","services","Windows","TC","fetchData","state","this","intervalId","setInterval","map","currentservice","_id","striped","bordered","hover","serviceList","Component","AWServiceList","axios","get","then","console","log","AW","catch","error","DBServiceList","DB","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.477d8988.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.service.SERVICE_NAME}</td>\r\n        <td>{props.service.STATE}</td>\r\n        <td><Button type=\"button\" class=\"btn btn-success active\">Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" class=\"btn btn-danger active\"> Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class TCServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    updateData = async () => {\r\n        const url = \"http://localhost:3000/tcservices/set1/update/\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        this.setState({ services: data.Windows[0].TC });\r\n    }\r\n\r\n\r\n    fetchData = async () => {\r\n        const url = \"http://localhost:3000/tcservices/set1/\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        this.setState({ services: data.Windows[0].TC });\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    async componentDidMount() {\r\n        await this.updateData();\r\n\r\n        // this.intervalId = setInterval(() => {\r\n        //     this.fetchData();\r\n        // }, 3000);\r\n\r\n        await this.fetchData();\r\n\r\n        this.intervalId = setInterval(() => {\r\n            this.fetchData();\r\n        }, 3000);\r\n\r\n        // axios\r\n        //     .get(\"http://localhost:3000/tcservices/set1/\")\r\n        //     .then((response) => {\r\n        //         this.setState({ services: response.data.Windows[0].TC });\r\n        //     })\r\n        //     .catch(function (error) {\r\n        //         console.log(error);\r\n        //     });\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        return this.state.services.map((currentservice) => {\r\n            return (\r\n\r\n                <Service\r\n                    service={currentservice}\r\n                    key={currentservice._id}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>TC Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.service.SERVICE_NAME}</td>\r\n        <td>{props.service.STATE}</td>\r\n        <td><Button type=\"button\" class=\"btn btn-success active\">Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" class=\"btn btn-danger active\"> Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class AWServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"http://localhost:3000/awservices/set1/\")\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                this.setState({ services: response.data.Windows[0].AW });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        return this.state.services.map((currentservice) => {\r\n            return (\r\n                <Service\r\n                    service={currentservice}\r\n                    key={currentservice._id}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>AW Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.service.SERVICE_NAME}</td>\r\n        <td>{props.service.STATE}</td>\r\n        <td><Button type=\"button\" class=\"btn btn-success active\">Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" class=\"btn btn-danger active\"> Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class DBServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"http://localhost:3000/dbservices/set1/\")\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                this.setState({ services: response.data.Windows[0].DB });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        return this.state.services.map((currentservice) => {\r\n            return (\r\n                <Service\r\n                    service={currentservice}\r\n                    key={currentservice._id}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>DB Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport TCServiceList from './components/TCServices/tcservicesList';\nimport AWServiceList from './components/AWServices/awservicesList';\nimport DBServiceList from './components/DBServices/dbservicesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TCServiceList />\n      <AWServiceList />\n      <DBServiceList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}