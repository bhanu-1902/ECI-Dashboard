{"version":3,"sources":["pages/TCservices.js","pages/AWservices.js","pages/DBservices.js","pages/Login.js","components/MenuItem.js","components/SideBar.js","App.js","reportWebVitals.js","index.js"],"names":["servicejson","require","displayNames","key","windows","set1","tc","hasOwnProperty","push","Service","props","className","displayname","service","Button","type","onClick","startService","stopService","TCServices","fetchData","a","axios","get","then","response","setState","services","data","Windows","TC","catch","error","console","log","updateData","i","length","patch","serviceName","bind","state","this","intervalId","setInterval","intervalId2","serviceStateArray","Object","entries","serviceStateMap","Map","set","SERVICE_NAME","STATE","_id","map","replace","striped","bordered","hover","serviceList","Component","aw","AWServices","AW","db","DBServices","DB","LogIn","href","class","action","for","name","required","MenuItem","subMenu","to","useState","expand","setExpand","menu","index","menuItems","SideBar","inactive","setInactive","useEffect","document","querySelectorAll","forEach","el","classList","remove","onCollapse","placeholder","menuItem","Owners","Types","Diagram","Data","Admin","Staging","Production","Communication","Faq","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.160e84be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport \"./ServicesList.css\";\r\nvar servicejson = require(\"../services-list.json\");\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.tc) {\r\n  if (servicejson.windows.set1.tc.hasOwnProperty(key) && key !== \"creds\") {\r\n    displayNames.push(key);\r\n  }\r\n}\r\n\r\nconst Service = (props) => (\r\n  <tr>\r\n    <td className=\"td1 data\">{props.displayname}</td>\r\n    <td className=\"td1 data\">{props.service}</td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.startService(props.displayname);\r\n        }}\r\n      >\r\n        Start\r\n      </Button>\r\n    </td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.stopService(props.displayname);\r\n        }}\r\n      >\r\n        Stop\r\n      </Button>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default class TCServices extends Component {\r\n  // This is the constructor that shall store our data retrieved from the database\r\n  constructor(props) {\r\n    super(props);\r\n    this.startService = this.startService.bind(this);\r\n    this.stopService = this.stopService.bind(this);\r\n    this.state = { services: [] };\r\n  }\r\n\r\n  fetchData = async () => {\r\n    axios\r\n      .get(\"http://localhost:3000/tcservices/get/set/1\")\r\n      .then((response) => {\r\n        this.setState({ services: response.data[0].Windows[0].TC });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateData = async () => {\r\n    for (var i = 0; i < displayNames.length; i++) {\r\n      axios.patch(\r\n        \"http://localhost:3000/tcservices/update/set/1/\" + displayNames[i]\r\n      );\r\n    }\r\n  };\r\n\r\n  startService = async (serviceName) => {\r\n    //if (serviceStateMap[serviceName.replace(/['\"]+/g, '')][0] === \"1 STOPPED\")\r\n    axios.patch(\"http://localhost:3000/tcservices/start/set/1/\" + serviceName);\r\n  };\r\n\r\n  stopService = async (serviceName) => {\r\n    axios.patch(\"http://localhost:3000/tcservices/stop/set/1/\" + serviceName);\r\n  };\r\n\r\n  // This method will get the data from the database.\r\n  async componentDidMount() {\r\n    await this.fetchData();\r\n\r\n    this.intervalId = setInterval(() => {\r\n      this.fetchData();\r\n    }, 3000);\r\n\r\n    await this.updateData();\r\n\r\n    this.intervalId2 = setInterval(() => {\r\n      this.updateData();\r\n    }, 3000);\r\n  }\r\n\r\n  // This method will map out the services on the table\r\n  serviceList() {\r\n    //const [inactive, setInactive] = useState(false);\r\n\r\n    var i = 0;\r\n    var serviceStateArray = Object.entries(this.state.services);\r\n\r\n    var serviceStateMap = new Map();\r\n\r\n    for (var key = 0; key < serviceStateArray.length; key++) {\r\n      serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1].STATE);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1]._id);\r\n    }\r\n    //console.log(serviceStateMap);\r\n\r\n    return this.state.services.map(() => {\r\n      // console.log(servicejson.windows.set1.tc[displayNames[i]]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n      return (\r\n        <Service\r\n          displayname={displayNames[i++]}\r\n          service={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.tc[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[0]\r\n          }\r\n          _id={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.tc[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[1]\r\n          }\r\n          startService={this.startService}\r\n          stopService={this.stopService}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the services.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>TC Service List</h3>\r\n        <ReactBootStrap.Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"td1 heading\">Service Name</th>\r\n              <th className=\"td1 heading\">Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.serviceList()}</tbody>\r\n        </ReactBootStrap.Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport \"./ServicesList.css\";\r\nvar servicejson = require(\"../services-list.json\");\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.aw) {\r\n  if (servicejson.windows.set1.aw.hasOwnProperty(key) && key !== \"creds\") {\r\n    displayNames.push(key);\r\n  }\r\n}\r\n\r\nconst Service = (props) => (\r\n  <tr>\r\n    <td className=\"td1 data\">{props.displayname}</td>\r\n    <td className=\"td1 data\">{props.service}</td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.startService(props.displayname);\r\n        }}\r\n      >\r\n        Start\r\n      </Button>\r\n    </td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.stopService(props.displayname);\r\n        }}\r\n      >\r\n        Stop\r\n      </Button>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default class AWServices extends Component {\r\n  // This is the constructor that shall store our data retrieved from the database\r\n  constructor(props) {\r\n    super(props);\r\n    this.startService = this.startService.bind(this);\r\n    this.stopService = this.stopService.bind(this);\r\n    this.state = { services: [] };\r\n  }\r\n\r\n  fetchData = async () => {\r\n    axios\r\n      .get(\"http://localhost:3000/awservices/get/set/1\")\r\n      .then((response) => {\r\n        this.setState({ services: response.data[0].Windows[0].AW });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateData = async () => {\r\n    for (var i = 0; i < displayNames.length; i++) {\r\n      axios.patch(\r\n        \"http://localhost:3000/awservices/update/set/1/\" + displayNames[i]\r\n      );\r\n    }\r\n  };\r\n\r\n  startService = async (serviceName) => {\r\n    axios.patch(\"http://localhost:3000/awservices/start/set/1/\" + serviceName);\r\n  };\r\n\r\n  stopService = async (serviceName) => {\r\n    axios.patch(\"http://localhost:3000/awservices/stop/set/1/\" + serviceName);\r\n  };\r\n\r\n  // This method will get the data from the database.\r\n  async componentDidMount() {\r\n    await this.fetchData();\r\n\r\n    this.intervalId = setInterval(() => {\r\n      this.fetchData();\r\n    }, 3000);\r\n\r\n    await this.updateData();\r\n\r\n    this.intervalId2 = setInterval(() => {\r\n      this.updateData();\r\n    }, 3000);\r\n  }\r\n\r\n  // This method will map out the services on the table\r\n  serviceList() {\r\n    var i = 0;\r\n    var serviceStateArray = Object.entries(this.state.services);\r\n\r\n    var serviceStateMap = new Map();\r\n\r\n    for (var key = 0; key < serviceStateArray.length; key++) {\r\n      serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1].STATE);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1]._id);\r\n    }\r\n    //console.log(serviceStateMap);\r\n\r\n    return this.state.services.map(() => {\r\n      // console.log(servicejson.windows.set1.db[displayNames[i]]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n      return (\r\n        <Service\r\n          displayname={displayNames[i++]}\r\n          service={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.aw[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[0]\r\n          }\r\n          _id={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.aw[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[1]\r\n          }\r\n          startService={this.startService}\r\n          stopService={this.stopService}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the services.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>AW Service List</h3>\r\n        <ReactBootStrap.Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"td1\">Service Name</th>\r\n              <th className=\"td1\">Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.serviceList()}</tbody>\r\n        </ReactBootStrap.Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport \"./ServicesList.css\";\r\nvar servicejson = require(\"../services-list.json\");\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.db) {\r\n  if (servicejson.windows.set1.db.hasOwnProperty(key) && key !== \"creds\") {\r\n    displayNames.push(key);\r\n  }\r\n}\r\n\r\nconst Service = (props) => (\r\n  <tr>\r\n    <td className=\"td1 data\">{props.displayname}</td>\r\n    <td className=\"td1 data\">{props.service}</td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.startService(props.displayname);\r\n        }}\r\n      >\r\n        Start\r\n      </Button>\r\n    </td>\r\n    <td className=\"td1\">\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          props.stopService(props.displayname);\r\n        }}\r\n      >\r\n        Stop\r\n      </Button>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default class DBServices extends Component {\r\n  // This is the constructor that shall store our data retrieved from the database\r\n  constructor(props) {\r\n    super(props);\r\n    this.startService = this.startService.bind(this);\r\n    this.stopService = this.stopService.bind(this);\r\n    this.state = { services: [] };\r\n  }\r\n\r\n  fetchData = async () => {\r\n    axios\r\n      .get(\"http://localhost:3000/dbservices/get/set/1\")\r\n      .then((response) => {\r\n        this.setState({ services: response.data[0].Windows[0].DB });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  updateData = async () => {\r\n    for (var i = 0; i < displayNames.length; i++) {\r\n      axios.patch(\r\n        \"http://localhost:3000/dbservices/update/set/1/\" + displayNames[i]\r\n      );\r\n    }\r\n  };\r\n\r\n  startService = async (serviceName) => {\r\n    axios.patch(\"http://localhost:3000/dbservices/start/set/1/\" + serviceName);\r\n  };\r\n\r\n  stopService = async (serviceName) => {\r\n    axios.patch(\"http://localhost:3000/dbservices/stop/set/1/\" + serviceName);\r\n  };\r\n\r\n  // This method will get the data from the database.\r\n  async componentDidMount() {\r\n    await this.fetchData();\r\n\r\n    this.intervalId = setInterval(() => {\r\n      this.fetchData();\r\n    }, 3000);\r\n\r\n    await this.updateData();\r\n\r\n    this.intervalId2 = setInterval(() => {\r\n      this.updateData();\r\n    }, 3000);\r\n  }\r\n\r\n  // This method will map out the services on the table\r\n  serviceList() {\r\n    var i = 0;\r\n    var serviceStateArray = Object.entries(this.state.services);\r\n\r\n    var serviceStateMap = new Map();\r\n\r\n    for (var key = 0; key < serviceStateArray.length; key++) {\r\n      serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1].STATE);\r\n      serviceStateMap\r\n        .get(serviceStateArray[key][1].SERVICE_NAME)\r\n        .push(serviceStateArray[key][1]._id);\r\n    }\r\n    //console.log(serviceStateMap);\r\n\r\n    return this.state.services.map(() => {\r\n      // console.log(servicejson.windows.set1.db[displayNames[i]]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n      // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n      return (\r\n        <Service\r\n          displayname={displayNames[i++]}\r\n          service={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.db[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[0]\r\n          }\r\n          _id={\r\n            serviceStateMap.get(\r\n              servicejson.windows.set1.db[displayNames[i - 1]].replace(\r\n                /['\"]+/g,\r\n                \"\"\r\n              )\r\n            )[1]\r\n          }\r\n          startService={this.startService}\r\n          stopService={this.stopService}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the services.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>DB Service List</h3>\r\n        <ReactBootStrap.Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"td1\">Service Name</th>\r\n              <th className=\"td1\">Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.serviceList()}</tbody>\r\n        </ReactBootStrap.Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\n\r\nfunction LogIn() {\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <nav>\r\n        <h1>\r\n          <a href=\"/\">ECI Dashboard</a>\r\n        </h1>\r\n        <ul>\r\n          <li>\r\n            <a href=\"/signup\" class=\"btn\">\r\n              Back\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <form action=\"/signup\">\r\n        <h2>Login</h2>\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" name=\"email\" required />\r\n        <div class=\"email error\"></div>\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" name=\"password\" required />\r\n        <div class=\"password error\"></div>\r\n        <button>login</button>\r\n      </form>\r\n      <footer>Siemens Digital Industries Software</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogIn;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction MenuItem(props) {\r\n  const { name, subMenu, onClick, to } = props;\r\n  const [expand, setExpand] = useState(false);\r\n\r\n  return (\r\n    <li onClick={props.onClick}>\r\n      <NavLink\r\n        to={to}\r\n        onClick={() => setExpand(!expand)}\r\n        className={`menu-item`}\r\n      >\r\n        <div className=\"menu-icon\">\r\n          <i class=\"bi bi-circle\"></i>\r\n        </div>\r\n        <span>{name}</span>\r\n      </NavLink>\r\n      {subMenu && subMenu.length > 0 ? (\r\n        <ul className={`sub-menu ${expand ? \"active\" : \"\"}`}>\r\n          {subMenu.map((menu, index) => (\r\n            <li key={index}>\r\n              <NavLink to={menu.to}>{menu.name}</NavLink>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default MenuItem;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./SideBar.css\";\r\nimport MenuItem from \"./MenuItem\";\r\n\r\nconst menuItems = [\r\n  {\r\n    name: \"Teamcenter ECI Owners\",\r\n    to: \"/eci-home/environment-owners\",\r\n  },\r\n  { name: \"Environment Types\", to: \"/eci-home/environment-types\" },\r\n  { name: \"Architecture Diagram\", to: \"/eci-home/diagram\" },\r\n  { name: \"Data Available\", to: \"/eci-home/data\" },\r\n  {\r\n    name: \"Environment Admin\",\r\n    to: \"/eci-home/environment-admin\",\r\n    subMenu: [\r\n      {\r\n        name: \"Staging Environment\",\r\n        to: \"/eci-home/environment-admin/staging\",\r\n      },\r\n      {\r\n        name: \"Production Environment\",\r\n        to: \"/eci-home/environment-admin/production\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: \"Environment communication\",\r\n    to: \"/eci-home/env-comm\",\r\n  },\r\n  { name: \"FAQ\", to: \"/eci-home/faq\" },\r\n  { name: \"Login\", to: \"/eci-home/login\" },\r\n];\r\nfunction SideBar(props) {\r\n  const [inactive, setInactive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (inactive) {\r\n      document.querySelectorAll(\".sub-menu\").forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n      });\r\n    }\r\n    props.onCollapse(inactive);\r\n  }, [inactive]);\r\n\r\n  return (\r\n    <div className={`sidebar ${inactive ? \"inactive\" : \"\"}`}>\r\n      <div className=\"top-section\">\r\n        <div className=\"sidebar-dashboard\">\r\n          <i class=\"nav-icon fas fa-tachometer-alt\"></i>\r\n        </div>\r\n\r\n        <div onClick={() => setInactive(!inactive)} className=\"toggle-arrow\">\r\n          <i\r\n            class={`${\r\n              inactive\r\n                ? \"bi bi-arrow-right-square-fill\"\r\n                : \"bi bi-arrow-left-square-fill\"\r\n            }`}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"search-box\">\r\n        <div className=\"search-btn\">\r\n          <i class=\"bi bi-search\"></i>\r\n        </div>\r\n        <input type=\"text\" placeholder=\"search\"></input>\r\n      </div>\r\n\r\n      <div className=\"divider\"></div>\r\n\r\n      <div className=\"main-menu\">\r\n        <ul>\r\n          {menuItems.map((menuItem, index) => (\r\n            <MenuItem\r\n              key={index}\r\n              name={menuItem.name}\r\n              to={menuItem.to}\r\n              subMenu={menuItem.subMenu || []}\r\n              onClick={() => {\r\n                if (inactive) {\r\n                  setInactive(false);\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n          {/* <li>\r\n            <a className=\"menu-item\">\r\n              <div className=\"menu-icon\">\r\n                <i class=\"bi bi-circle\"></i>\r\n              </div>\r\n              <span>Teamcenter ECI Owners</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className=\"menu-item\">\r\n              <div className=\"menu-icon\">\r\n                <i class=\"bi bi-circle\"></i>\r\n              </div>\r\n              <span>Environment Types</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className=\"menu-item\">\r\n              <div className=\"menu-icon\">\r\n                <i class=\"bi bi-circle\"></i>\r\n              </div>\r\n              <span>Architecture Diagram</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className=\"menu-item\">\r\n              <div className=\"menu-icon\">\r\n                <i class=\"bi bi-circle\"></i>\r\n              </div>\r\n              <span>Data Available</span>\r\n            </a>\r\n          </li>\r\n          <MenuItem\r\n            name={\"Environment Admin\"}\r\n            subMenu={[\r\n              { name: \"Staging Environment\" },\r\n              { name: \"Production Environment\" },\r\n            ]}\r\n          /> */}\r\n          {/* <li>\r\n            <a className=\"menu-item\">\r\n              <div className=\"menu-icon\">\r\n                <i class=\"bi bi-circle\"></i>\r\n              </div>\r\n              <span>Environment Admin</span>\r\n            </a>\r\n            <ul className=\"sub-menu\">\r\n              <li>\r\n                <a>Staging Environment</a>\r\n              </li>\r\n              <li>\r\n                <a>Production Environment</a>\r\n              </li>\r\n            </ul>\r\n          </li> */}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <div className=\"avatar\">\r\n          <i class=\"bi bi-person-circle\"></i>\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <h4>User Name</h4>\r\n          <p>user.name@gmail.com</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TCServices from \"./pages/TCservices\";\nimport AWServices from \"./pages/AWservices\";\nimport DBServices from \"./pages/DBservices\";\nimport Login from \"./pages/Login\";\nimport Sidebar from \"./components/SideBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst Owners = () => {\n  return <h1>Teamcenter ECI Owners</h1>;\n};\n\nconst Types = () => {\n  return <h1>Environment Types</h1>;\n};\n\nconst Diagram = () => {\n  return <h1>Architecture Diagram</h1>;\n};\n\nconst Data = () => {\n  return <h1>Data Available</h1>;\n};\n\nconst Admin = () => {\n  return (\n    <div>\n      <TCServices />\n      <AWServices />\n      <DBServices />\n    </div>\n    //<h1>Hello admin</h1>\n  );\n};\n\nconst Staging = () => {\n  return <AWServices />;\n};\n\nconst Production = () => {\n  return <h1>Environment Admin/Production Environment</h1>;\n};\n\nconst Communication = () => {\n  return <h1>Team links for environment communication</h1>;\n};\n\nconst Faq = () => {\n  return <h1>FAQ</h1>;\n};\n\n// const Auth = () => {\n//   return <Login />;\n// };\n\nfunction App() {\n  const [inactive, setInactive] = useState(false);\n  // <AWServiceList />;\n  return (\n    <div className=\"App\">\n      {/* <TCServiceList />\n     \n      <DBServiceList /> */}\n      <Router>\n        <Sidebar\n          onCollapse={(inactive) => {\n            setInactive(inactive);\n          }}\n        />\n\n        <div className={`container ${inactive ? \"inactive\" : \"\"}`}>\n          <Switch>\n            <Route path={\"/eci-home/environment-owners\"}>\n              <Owners />\n            </Route>\n            <Route path={\"/eci-home/environment-types\"}>\n              <Types />\n            </Route>\n            <Route path={\"/eci-home/diagram\"}>\n              <Diagram />\n            </Route>\n            <Route path={\"/eci-home/data\"}>\n              <Data />\n            </Route>\n            <Route path={\"/eci-home/environment-admin\"}>\n              <Admin />\n            </Route>\n            <Route path={\"/eci-home/environment-admin/staging\"}>\n              <Staging />\n            </Route>\n            <Route path={\"/eci-home/environment-admin/production\"}>\n              <Production />\n            </Route>\n            <Route path={\"/eci-home/env-comm\"}>\n              <Communication />\n            </Route>\n            <Route path={\"/eci-home/faq\"}>\n              <Faq />\n            </Route>\n            <Route path={\"/eci-home/login\"}>\n              <Login />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}