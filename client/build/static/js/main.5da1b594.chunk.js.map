{"version":3,"sources":["components/TCServices/tcservicesList.js","components/AWServices/awservicesList.js","components/DBServices/dbservicesList.js","App.js","reportWebVitals.js","index.js"],"names":["servicejson","require","displayNames","key","windows","set1","tc","hasOwnProperty","push","Service","props","displayname","service","Button","type","onClick","startService","stopService","TCServiceList","fetchData","a","axios","get","then","response","setState","services","data","Windows","TC","catch","error","console","log","updateData","i","length","patch","serviceName","bind","state","this","intervalId","setInterval","intervalId2","serviceStateArray","Object","entries","serviceStateMap","Map","set","SERVICE_NAME","STATE","_id","map","replace","striped","bordered","hover","serviceList","Component","aw","AW","db","DBServiceList","DB","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5da1b594.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nvar servicejson = require('../../services-list.json');\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.tc) {\r\n    if (servicejson.windows.set1.tc.hasOwnProperty(key) && key !== 'creds') {\r\n        displayNames.push(key);\r\n    }\r\n}\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.displayname}</td>\r\n        <td>{props.service}</td>\r\n        <td><Button type=\"button\" onClick={() => { props.startService(props.displayname) }}>Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" onClick={() => { props.stopService(props.displayname) }}>Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class TCServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.startService = this.startService.bind(this);\r\n        this.stopService = this.stopService.bind(this);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    fetchData = async () => {\r\n        axios\r\n            .get(\"http://localhost:3000/tcservices/get/set/1\")\r\n            .then((response) => {\r\n                this.setState({ services: response.data[0].Windows[0].TC });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    updateData = async () => {\r\n        for (var i = 0; i < displayNames.length; i++) {\r\n            axios\r\n                .patch(\"http://localhost:3000/tcservices/update/set/1/\" + displayNames[i]);\r\n        }\r\n\r\n    }\r\n\r\n    startService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/tcservices/start/set/1/\" + serviceName);\r\n    }\r\n\r\n    stopService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/tcservices/stop/set/1/\" + serviceName);\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    async componentDidMount() {\r\n\r\n        await this.fetchData();\r\n\r\n        this.intervalId = setInterval(() => {\r\n            this.fetchData();\r\n        }, 3000);\r\n\r\n        await this.updateData();\r\n\r\n        this.intervalId2 = setInterval(() => {\r\n            this.updateData();\r\n        }, 3000);\r\n\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        var i = 0;\r\n        var serviceStateArray = Object.entries(this.state.services);\r\n\r\n        var serviceStateMap = new Map();\r\n\r\n        for (var key = 0; key < serviceStateArray.length; key++) {\r\n            serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1].STATE);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1]._id);\r\n\r\n        }\r\n        //console.log(serviceStateMap);\r\n\r\n        return this.state.services.map(() => {\r\n            // console.log(servicejson.windows.set1.tc[displayNames[i]]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n            return (\r\n                <Service\r\n                    displayname={displayNames[i++]}\r\n                    service={serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i - 1]].replace(/['\"]+/g, ''))[0]}\r\n                    _id={serviceStateMap.get(servicejson.windows.set1.tc[displayNames[i - 1]].replace(/['\"]+/g, ''))[1]}\r\n                    startService={this.startService}\r\n                    stopService={this.stopService}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>TC Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nvar servicejson = require('../../services-list.json');\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.aw) {\r\n    if (servicejson.windows.set1.aw.hasOwnProperty(key) && key !== 'creds') {\r\n        displayNames.push(key);\r\n    }\r\n}\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.displayname}</td>\r\n        <td>{props.service}</td>\r\n        <td><Button type=\"button\" onClick={() => { props.startService(props.displayname) }}>Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" onClick={() => { props.stopService(props.displayname) }}>Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class TCServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.startService = this.startService.bind(this);\r\n        this.stopService = this.stopService.bind(this);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    fetchData = async () => {\r\n        axios\r\n            .get(\"http://localhost:3000/awservices/get/set/1\")\r\n            .then((response) => {\r\n                this.setState({ services: response.data[0].Windows[0].AW });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    updateData = async () => {\r\n        for (var i = 0; i < displayNames.length; i++) {\r\n            axios\r\n                .patch(\"http://localhost:3000/awservices/update/set/1/\" + displayNames[i]);\r\n        }\r\n\r\n    }\r\n\r\n    startService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/awservices/start/set/1/\" + serviceName);\r\n    }\r\n\r\n    stopService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/awservices/stop/set/1/\" + serviceName);\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    async componentDidMount() {\r\n\r\n        await this.fetchData();\r\n\r\n        this.intervalId = setInterval(() => {\r\n            this.fetchData();\r\n        }, 3000);\r\n\r\n        await this.updateData();\r\n\r\n        this.intervalId2 = setInterval(() => {\r\n            this.updateData();\r\n        }, 3000);\r\n\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        var i = 0;\r\n        var serviceStateArray = Object.entries(this.state.services);\r\n\r\n        var serviceStateMap = new Map();\r\n\r\n        for (var key = 0; key < serviceStateArray.length; key++) {\r\n            serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1].STATE);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1]._id);\r\n\r\n        }\r\n        //console.log(serviceStateMap);\r\n\r\n        return this.state.services.map(() => {\r\n            // console.log(servicejson.windows.set1.db[displayNames[i]]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n            return (\r\n                <Service\r\n                    displayname={displayNames[i++]}\r\n                    service={serviceStateMap.get(servicejson.windows.set1.aw[displayNames[i - 1]].replace(/['\"]+/g, ''))[0]}\r\n                    _id={serviceStateMap.get(servicejson.windows.set1.aw[displayNames[i - 1]].replace(/['\"]+/g, ''))[1]}\r\n                    startService={this.startService}\r\n                    stopService={this.stopService}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>AW Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\"\r\nimport { Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nvar servicejson = require('../../services-list.json');\r\n\r\nvar displayNames = [];\r\nfor (var key in servicejson.windows.set1.db) {\r\n    if (servicejson.windows.set1.db.hasOwnProperty(key) && key !== 'creds') {\r\n        displayNames.push(key);\r\n    }\r\n}\r\n\r\nconst Service = (props) => (\r\n    <tr>\r\n        <td>{props.displayname}</td>\r\n        <td>{props.service}</td>\r\n        <td><Button type=\"button\" onClick={() => { props.startService(props.displayname) }}>Start</Button></td>\r\n        <td>\r\n            <Button type=\"button\" onClick={() => { props.stopService(props.displayname) }}>Stop</Button>\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default class DBServiceList extends Component {\r\n    // This is the constructor that shall store our data retrieved from the database\r\n    constructor(props) {\r\n        super(props);\r\n        this.startService = this.startService.bind(this);\r\n        this.stopService = this.stopService.bind(this);\r\n        this.state = { services: [] };\r\n    }\r\n\r\n    fetchData = async () => {\r\n        axios\r\n            .get(\"http://localhost:3000/dbservices/get/set/1\")\r\n            .then((response) => {\r\n                this.setState({ services: response.data[0].Windows[0].DB });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    updateData = async () => {\r\n        for (var i = 0; i < displayNames.length; i++) {\r\n            axios\r\n                .patch(\"http://localhost:3000/dbservices/update/set/1/\" + displayNames[i]);\r\n        }\r\n\r\n    }\r\n\r\n    startService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/dbservices/start/set/1/\" + serviceName);\r\n    }\r\n\r\n    stopService = async (serviceName) => {\r\n        axios\r\n            .patch(\"http://localhost:3000/dbservices/stop/set/1/\" + serviceName);\r\n    }\r\n\r\n    // This method will get the data from the database.\r\n    async componentDidMount() {\r\n\r\n        await this.fetchData();\r\n\r\n        this.intervalId = setInterval(() => {\r\n            this.fetchData();\r\n        }, 3000);\r\n\r\n        await this.updateData();\r\n\r\n        this.intervalId2 = setInterval(() => {\r\n            this.updateData();\r\n        }, 3000);\r\n\r\n    }\r\n\r\n    // This method will map out the services on the table\r\n    serviceList() {\r\n        var i = 0;\r\n        var serviceStateArray = Object.entries(this.state.services);\r\n\r\n        var serviceStateMap = new Map();\r\n\r\n        for (var key = 0; key < serviceStateArray.length; key++) {\r\n            serviceStateMap.set(serviceStateArray[key][1].SERVICE_NAME, []);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1].STATE);\r\n            serviceStateMap.get(serviceStateArray[key][1].SERVICE_NAME).push(serviceStateArray[key][1]._id);\r\n\r\n        }\r\n        //console.log(serviceStateMap);\r\n\r\n        return this.state.services.map(() => {\r\n            // console.log(servicejson.windows.set1.db[displayNames[i]]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[0]);\r\n            // console.log(serviceStateMap.get(servicejson.windows.set1.db[displayNames[i]].replace(/['\"]+/g, ''))[1]);\r\n            return (\r\n                <Service\r\n                    displayname={displayNames[i++]}\r\n                    service={serviceStateMap.get(servicejson.windows.set1.db[displayNames[i - 1]].replace(/['\"]+/g, ''))[0]}\r\n                    _id={serviceStateMap.get(servicejson.windows.set1.db[displayNames[i - 1]].replace(/['\"]+/g, ''))[1]}\r\n                    startService={this.startService}\r\n                    stopService={this.stopService}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    // This following section will display the table with the services.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>DB Service List</h3>\r\n                <ReactBootStrap.Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Service Name</th>\r\n                            <th>Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.serviceList()}\r\n                    </tbody>\r\n                </ReactBootStrap.Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport TCServiceList from './components/TCServices/tcservicesList';\nimport AWServiceList from './components/AWServices/awservicesList';\nimport DBServiceList from './components/DBServices/dbservicesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TCServiceList />\n      <AWServiceList />\n      <DBServiceList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}